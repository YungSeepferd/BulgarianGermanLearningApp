/**
 * @file add-direction-notes.mjs
 * @description Adds comprehensive direction-specific learning notes to all vocabulary
 * @purpose Enable proper bidirectional learning with language-specific explanations
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const VOCAB_PATH = path.join(__dirname, '../data/vocabulary.json');

/**
 * Generates German explanation for German speakers learning Bulgarian
 * @param {Object} entry - Vocabulary entry
 * @returns {string} German explanation
 */
function generateNotesDeTo–ëg(entry) {
  const { word, translation, category, etymology, linguistic_note } = entry;
  
  // Extract key information
  const wordParts = analyzeWord(word);
  let explanation = `F√ºr Deutschsprachige: '${word}' ‚âà '${translation}'`;
  
  // Add word breakdown if compound or has clear root
  if (wordParts.isCompound) {
    explanation += `; zusammengesetzt aus '${wordParts.parts.join("' + '")}'`;
  } else if (wordParts.root) {
    explanation += `; von '${wordParts.root}'`;
  }
  
  // Add pronunciation hint
  if (linguistic_note && linguistic_note.includes('Stress')) {
    const stressMatch = linguistic_note.match(/Stress.*?[:Ôºö]\s*(.+?)(?:\.|$)/i);
    if (stressMatch) {
      explanation += `. Betonung: ${stressMatch[1]}`;
    }
  }
  
  // Add grammatical info
  explanation += `. ${getGrammarNote(entry, 'de')}`;
  
  // Add usage level
  explanation += ` ${getUsageLevel(entry, 'de')}`;
  
  return explanation.trim();
}

/**
 * Generates Bulgarian explanation for Bulgarian speakers learning German
 * @param {Object} entry - Vocabulary entry
 * @returns {string} Bulgarian explanation
 */
function generateNotesBgToDe(entry) {
  const { word, translation, category } = entry;
  
  // Bulgarian explanations in Bulgarian
  let explanation = `–ó–∞ –±—ä–ª–≥–∞—Ä–∏—Ç–µ: '${word}' –Ω–∞ –Ω–µ–º—Å–∫–∏ –µ '${translation}'`;
  
  // Add German word breakdown if compound
  const germanParts = analyzeGermanWord(translation);
  if (germanParts.isCompound) {
    explanation += `; –Ω–µ–º—Å–∫–∞—Ç–∞ –¥—É–º–∞ —Å–µ —Å—ä—Å—Ç–æ–∏ –æ—Ç '${germanParts.parts.join("' + '")}'`;
  }
  
  // Add grammatical comparison
  explanation += `. ${getGrammarNote(entry, 'bg')}`;
  
  // Add usage context
  explanation += ` ${getUsageLevel(entry, 'bg')}`;
  
  return explanation.trim();
}

/**
 * Analyzes Bulgarian word structure
 */
function analyzeWord(word) {
  const result = { isCompound: false, parts: [], root: null };
  
  // Common Bulgarian compound patterns
  if (word.includes(' ')) {
    result.isCompound = true;
    result.parts = word.split(' ');
    return result;
  }
  
  // Known roots and compounds
  const compoundPatterns = {
    '–î–æ–±—Ä–æ —É—Ç—Ä–æ': { parts: ['–¥–æ–±—Ä–æ', '—É—Ç—Ä–æ'] },
    '–î–æ–±—ä—Ä –¥–µ–Ω': { parts: ['–¥–æ–±—ä—Ä', '–¥–µ–Ω'] },
    '–î–æ–±—ä—Ä –≤–µ—á–µ—Ä': { parts: ['–¥–æ–±—ä—Ä', '–≤–µ—á–µ—Ä'] },
    '–õ–µ–∫–∞ –Ω–æ—â': { parts: ['–ª–µ–∫–∞', '–Ω–æ—â'] },
    '–ë–ª–∞–≥–æ–¥–∞—Ä—è': { root: '–±–ª–∞–≥–æ + –¥–∞—Ä—è' },
    '–î–æ–≤–∏–∂–¥–∞–Ω–µ': { root: '–¥–æ + –≤–∏–∂–¥–∞–Ω–µ' },
    '–£—á–∏–ª–∏—â–µ': { root: '—É—á–∞ (lernen)' },
    '–°–µ–º–µ–π—Å—Ç–≤–æ': { root: '—Å–µ–º–µ (Samen)' },
    '–ó–¥—Ä–∞–≤–µ–π': { root: '–∑–¥—Ä–∞–≤ (gesund)' },
  };
  
  if (compoundPatterns[word]) {
    const pattern = compoundPatterns[word];
    if (pattern.parts) {
      result.isCompound = true;
      result.parts = pattern.parts;
    }
    if (pattern.root) {
      result.root = pattern.root;
    }
  }
  
  return result;
}

/**
 * Analyzes German word structure
 */
function analyzeGermanWord(word) {
  const result = { isCompound: false, parts: [] };
  
  // Common German compounds
  const compounds = {
    'Guten Morgen': ['Guten', 'Morgen'],
    'Guten Tag': ['Guten', 'Tag'],
    'Guten Abend': ['Guten', 'Abend'],
    'Gute Nacht': ['Gute', 'Nacht'],
    'Auf Wiedersehen': ['Auf', 'Wiedersehen'],
    'Es tut mir leid': ['Es tut mir leid'],
  };
  
  if (compounds[word]) {
    result.isCompound = true;
    result.parts = compounds[word];
  }
  
  return result;
}

/**
 * Gets grammar note in target language
 */
function getGrammarNote(entry, targetLang) {
  const { category, word, translation } = entry;
  
  if (targetLang === 'de') {
    // German explanations
    const notes = {
      'Begr√º√üung': 'Feste Redewendung.',
      'Ausdruck': 'H√∂flichkeitsausdruck.',
      'Substantiv': word.endsWith('–∞') || word.endsWith('—è') ? 'Femininum.' : 
                    word.endsWith('–æ') || word.endsWith('–µ') ? 'Neutrum.' : 'Maskulinum.',
      'Verb': 'Bulgarisches Verb.',
      'Adjektiv': 'Bulgarisches Adjektiv (flektiert nach Geschlecht).',
      'Adverb': 'Unver√§nderliches Adverb.',
      'Zahl': 'Zahlwort.',
      'Zeit': 'Zeitbegriff.',
      'Pronomen': 'Pronomen.',
    };
    return notes[category] || 'Bulgarisches Wort.';
  } else {
    // Bulgarian explanations
    const notes = {
      'Begr√º√üung': '–£—Å—Ç–æ–π—á–∏–≤ –∏–∑—Ä–∞–∑ –∑–∞ –ø–æ–∑–¥—Ä–∞–≤.',
      'Ausdruck': '–£—á—Ç–∏–≤ –∏–∑—Ä–∞–∑.',
      'Substantiv': '–°—ä—â–µ—Å—Ç–≤–∏—Ç–µ–ª–Ω–æ –∏–º–µ –Ω–∞ –Ω–µ–º—Å–∫–∏.',
      'Verb': '–ì–ª–∞–≥–æ–ª –Ω–∞ –Ω–µ–º—Å–∫–∏.',
      'Adjektiv': '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª–Ω–æ –Ω–∞ –Ω–µ–º—Å–∫–∏ (–ø—Ä–æ–º–µ–Ω—è —Å–µ –ø–æ —Ä–æ–¥).',
      'Adverb': '–ù–∞—Ä–µ—á–∏–µ.',
      'Zahl': '–ß–∏—Å–ª–∏—Ç–µ–ª–Ω–æ.',
      'Zeit': '–ü–æ–Ω—è—Ç–∏–µ –∑–∞ –≤—Ä–µ–º–µ.',
      'Pronomen': '–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ.',
    };
    return notes[category] || '–ù–µ–º—Å–∫–∞ –¥—É–º–∞.';
  }
}

/**
 * Gets usage level description
 */
function getUsageLevel(entry, targetLang) {
  const { level, frequency } = entry;
  
  if (targetLang === 'de') {
    if (frequency >= 90) return 'Sehr h√§ufig verwendet.';
    if (frequency >= 70) return 'H√§ufig verwendet.';
    if (frequency >= 50) return 'M√§√üig h√§ufig.';
    return 'Seltener verwendet.';
  } else {
    if (frequency >= 90) return '–ú–Ω–æ–≥–æ —á–µ—Å—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∞ –¥—É–º–∞.';
    if (frequency >= 70) return '–ß–µ—Å—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∞.';
    if (frequency >= 50) return '–£–º–µ—Ä–µ–Ω–æ —á–µ—Å—Ç–æ.';
    return '–ü–æ-—Ä—è–¥–∫–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∞.';
  }
}

/**
 * Main enhancement function
 */
async function addDirectionNotes() {
  console.log('üìö Loading vocabulary...');
  
  try {
    const data = await fs.readFile(VOCAB_PATH, 'utf8');
    const vocabulary = JSON.parse(data);
    
    console.log(`‚úÖ Loaded ${vocabulary.length} entries`);
    
    // Count incomplete
    const incomplete = vocabulary.filter(entry => 
      !entry.notes_de_to_bg || !entry.notes_bg_to_de
    );
    
    console.log(`üîÑ Adding direction notes to ${incomplete.length} entries...`);
    
    // Enhance all entries
    const enhanced = vocabulary.map((entry, index) => {
      const result = { ...entry };
      
      // Add German ‚Üí Bulgarian notes if missing
      if (!result.notes_de_to_bg) {
        result.notes_de_to_bg = generateNotesDeTo–ëg(entry);
      }
      
      // Add Bulgarian ‚Üí German notes if missing
      if (!result.notes_bg_to_de) {
        result.notes_bg_to_de = generateNotesBgToDe(entry);
      }
      
      if (index % 20 === 0) {
        console.log(`   Processing: ${index + 1}/${vocabulary.length}...`);
      }
      
      return result;
    });
    
    // Backup
    const backupPath = VOCAB_PATH.replace('.json', `.backup-direction-${Date.now()}.json`);
    await fs.writeFile(backupPath, data, 'utf8');
    console.log(`üíæ Backup: ${path.basename(backupPath)}`);
    
    // Save
    await fs.writeFile(VOCAB_PATH, JSON.stringify(enhanced, null, 2), 'utf8');
    console.log(`‚úÖ Enhanced vocabulary saved`);
    
    // Stats
    const complete = enhanced.filter(e => e.notes_de_to_bg && e.notes_bg_to_de);
    console.log(`\nüìä Statistics:`);
    console.log(`   Total: ${enhanced.length}`);
    console.log(`   Complete bidirectional notes: ${complete.length}`);
    console.log(`   Coverage: ${Math.round(complete.length / enhanced.length * 100)}%`);
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

addDirectionNotes();
