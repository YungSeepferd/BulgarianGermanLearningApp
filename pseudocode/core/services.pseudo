# Go Spaced Repetition Service for Hugo Bulgarian-German Learning App

# Implements the SM-2 algorithm for calculating review intervals
# This will be implemented as a Go package and integrated with Hugo via JavaScript

PACKAGE spacedrepetition

IMPORT (
    "math"
    "time"
)

# CalculateNextReview implements the SM-2 spaced repetition algorithm
FUNCTION CalculateNextReview(correct bool, state ReviewState) (time.Time, ReviewState) {
    """
    Calculate the next review time using the SM-2 algorithm.
    
    Args:
        correct: Whether the user answered the item correctly
        state: Current review state of the item
        
    Returns:
        next_review_time and updated_review_state
    """
    
    # Initialize quality score (5 for correct, 2 for incorrect)
    var quality int
    if correct {
        quality = 5
    } else {
        quality = 2
    }
    
    # Create new state (copy of input state)
    newState := ReviewState{
        ItemID:      state.ItemID,
        Interval:    state.Interval,
        EaseFactor:  state.EaseFactor,
        Repetitions: state.Repetitions,
        LastReview:  time.Now(),
    }
    
    # SM-2 algorithm logic
    if quality < 3 {
        # Incorrect answer - reset repetitions and interval
        newState.Repetitions = 0
        newState.Interval = 1
    } else {
        # Correct answer - update interval based on repetitions
        newState.Repetitions = newState.Repetitions + 1
        
        if newState.Repetitions == 1 {
            newState.Interval = 1
        } else if newState.Repetitions == 2 {
            newState.Interval = 6
        } else {
            # For subsequent reviews, multiply by ease factor
            newState.Interval = int(math.Round(float64(newState.Interval) * newState.EaseFactor))
        }
    }
    
    # Update ease factor (bounded between 1.3 and 2.5)
    q := float64(quality)
    newState.EaseFactor = newState.EaseFactor + (0.1 - (5.0-q)*(0.08+(5.0-q)*0.02))
    newState.EaseFactor = math.Max(1.3, newState.EaseFactor)
    
    # Calculate next review date (current time + interval days)
    nextReview := time.Now().AddDate(0, 0, newState.Interval)
    newState.NextReview = nextReview
    
    return nextReview, newState
}

# GetDueItems returns items that are due for review
FUNCTION GetDueItems(reviewStates []ReviewState) []ReviewState {
    """
    Filter review states to return only items due for review
    """
    var dueItems []ReviewState
    now := time.Now()
    
    for _, state := range reviewStates {
        if state.NextReview.IsZero() || state.NextReview.Before(now) {
            dueItems = append(dueItems, state)
        }
    }
    
    return dueItems
}

# InitializeReviewState creates a new review state for an item
FUNCTION InitializeReviewState(itemID string) ReviewState {
    """
    Create initial review state for a new vocabulary/grammar item
    """
    return ReviewState{
        ItemID:      itemID,
        Interval:    1,
        EaseFactor:  2.5,
        Repetitions: 0,
        NextReview:  time.Now(), # Due immediately for first review
        LastReview:  time.Time{}, # Zero time
    }
}

# Test cases for the spaced repetition service
TEST "test_first_correct_answer"
    # Setup
    state = ReviewState()
    
    # Execute
    (next_review, updated_state) = calculate_next_review(TRUE, state)
    
    # Verify
    ASSERT updated_state.repetitions == 1
    ASSERT updated_state.interval == 1
    ASSERT next_review > CURRENT_TIME
    ASSERT updated_state.next_review == next_review

TEST "test_incorrect_answer_resets_progress"
    # Setup
    state = ReviewState()
    state.repetitions = 5
    state.interval = 100
    state.ease_factor = 2.5
    
    # Execute
    (next_review, updated_state) = calculate_next_review(FALSE, state)
    
    # Verify
    ASSERT updated_state.repetitions == 0
    ASSERT updated_state.interval == 1
    ASSERT next_review > CURRENT_TIME
