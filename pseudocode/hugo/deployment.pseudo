# GitHub Pages Deployment Strategy for Hugo Bulgarian-German Learning App

## GitHub Actions Workflow

CLASS GitHubActionsWorkflow
    """
    Automated deployment pipeline for Hugo site to GitHub Pages
    """
    
    METHODS:
        create_workflow_file() -> String
            """
            Generate .github/workflows/deploy.yml for automated deployment
            """
            RETURN """
name: Deploy Hugo Site to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Go data processor
        run: |
          cd tools
          go build -o ../hugo-bg-de ./cmd/hugo-bg-de

      - name: Process data files
        run: ./hugo-bg-de process-data

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
            """

## Repository Configuration

CLASS GitHubPagesConfig
    """
    Configuration for GitHub Pages deployment
    """
    
    METHODS:
        setup_repository_settings() -> Map[String, Any]
            """
            Required repository settings for GitHub Pages
            """
            RETURN {
                "pages": {
                    "source": "GitHub Actions",
                    "branch": null,  # Not used with Actions
                    "path": null     # Not used with Actions
                },
                "actions": {
                    "permissions": {
                        "contents": "read",
                        "pages": "write", 
                        "id-token": "write"
                    }
                },
                "environment": {
                    "name": "github-pages",
                    "protection_rules": {
                        "required_reviewers": false,
                        "wait_timer": 0
                    }
                }
            }
            
        create_hugo_config() -> String
            """
            Hugo configuration optimized for GitHub Pages
            """
            RETURN """
baseURL = 'https://USERNAME.github.io/REPOSITORY_NAME'
languageCode = 'en-us'
title = 'Bulgarian-German Learning App'
theme = 'bulgarian-german-theme'

# GitHub Pages configuration
publishDir = 'public'
canonifyURLs = true
relativeURLs = false

# Content configuration
contentDir = 'content'
dataDir = 'data'
layoutDir = 'layouts'
staticDir = 'static'

# Build configuration
buildDrafts = false
buildFuture = false
buildExpired = false

# Markup configuration
[markup]
  [markup.goldmark]
    [markup.goldmark.renderer]
      unsafe = true
  [markup.highlight]
    style = 'github'
    lineNos = true
    codeFences = true

# Menu configuration
[menu]
  [[menu.main]]
    name = 'Vocabulary'
    url = '/vocabulary/'
    weight = 10
  [[menu.main]]
    name = 'Grammar'
    url = '/grammar/'
    weight = 20
  [[menu.main]]
    name = 'Practice'
    url = '/practice/'
    weight = 30

# Site parameters
[params]
  description = 'Learn Bulgarian and German with spaced repetition'
  author = 'Bulgarian-German Learning App'
  enablePWA = true
  enableAudio = true
  defaultSessionLength = 20
  themeColor = '#4a6fa5'
  shortName = 'BG-DE Learn'
  githubRepo = 'https://github.com/USERNAME/REPOSITORY_NAME'
  
  # Analytics (optional)
  # googleAnalytics = 'G-XXXXXXXXXX'
  
  # Social media (optional)
  [params.social]
    github = 'USERNAME/REPOSITORY_NAME'

# Taxonomies
[taxonomies]
  category = 'categories'
  tag = 'tags'
  level = 'levels'

# Output formats
[outputs]
  home = ['HTML', 'RSS', 'JSON']
  page = ['HTML']
  section = ['HTML', 'RSS']

# Custom output format for search index
[outputFormats]
  [outputFormats.SearchIndex]
    mediaType = 'application/json'
    baseName = 'search-index'
    isPlainText = true
    notAlternative = true

# Minification
[minify]
  disableCSS = false
  disableHTML = false
  disableJS = false
  disableJSON = false
  disableSVG = false
  disableXML = false
            """

## Deployment Optimization

CLASS DeploymentOptimization
    """
    Optimization strategies for GitHub Pages deployment
    """
    
    METHODS:
        optimize_for_github_pages() -> Void
            """
            Apply GitHub Pages specific optimizations
            """
            # Configure Hugo for static hosting
            configure_static_hosting()
            
            # Optimize asset loading
            optimize_asset_loading()
            
            # Configure caching headers
            configure_caching()
            
            # Set up PWA for offline functionality
            setup_pwa_features()
            
        configure_static_hosting() -> Void
            """
            Configure Hugo for static file hosting
            """
            # Ensure all URLs are absolute or properly relative
            # Configure proper base URLs
            # Set up proper redirects for SPA behavior
            
            create_redirects_file()
            create_404_page()
            create_robots_txt()
            
        create_redirects_file() -> String
            """
            Create _redirects file for Netlify-style redirects (if supported)
            """
            RETURN """
# SPA fallback for practice sessions
/practice/* /practice/index.html 200

# API fallback (if using client-side routing)
/api/* /index.html 200

# Legacy redirects
/vocab/* /vocabulary/:splat 301
/grammar-rules/* /grammar/:splat 301
            """
            
        create_404_page() -> String
            """
            Create custom 404 page
            """
            RETURN """
---
title: "Page Not Found"
layout: "404"
---

# Page Not Found

The page you're looking for doesn't exist. Here are some helpful links:

- [Vocabulary](/vocabulary/)
- [Grammar](/grammar/)
- [Practice](/practice/)
- [Home](/)

<script>
// Attempt to redirect based on URL patterns
const path = window.location.pathname;
if (path.includes('/vocab/')) {
    window.location.href = path.replace('/vocab/', '/vocabulary/');
} else if (path.includes('/grammar-rules/')) {
    window.location.href = path.replace('/grammar-rules/', '/grammar/');
}
</script>
            """
            
        setup_pwa_features() -> Void
            """
            Configure Progressive Web App features
            """
            generate_manifest_json()
            generate_service_worker()
            add_pwa_meta_tags()
            
        generate_manifest_json() -> String
            """
            Generate PWA manifest file
            """
            RETURN """
{
  "name": "Bulgarian-German Learning App",
  "short_name": "BG-DE Learn",
  "description": "Learn Bulgarian and German with spaced repetition",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#4a6fa5",
  "orientation": "portrait-primary",
  "icons": [
    {
      "src": "/icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-96x96.png", 
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-128x128.png",
      "sizes": "128x128", 
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable any"
    }
  ],
  "categories": ["education", "productivity"],
  "lang": "en",
  "dir": "ltr"
}
            """

## Performance Optimization

CLASS PerformanceOptimization
    """
    Performance optimization for GitHub Pages hosting
    """
    
    METHODS:
        optimize_loading_performance() -> Void
            """
            Optimize site loading performance
            """
            # Implement lazy loading for images
            implement_lazy_loading()
            
            # Optimize critical CSS
            optimize_critical_css()
            
            # Implement resource hints
            add_resource_hints()
            
            # Configure asset bundling
            configure_asset_bundling()
            
        implement_lazy_loading() -> String
            """
            Add lazy loading for images and heavy content
            """
            RETURN """
<script>
// Intersection Observer for lazy loading
const imageObserver = new IntersectionObserver((entries, observer) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const img = entry.target;
      img.src = img.dataset.src;
      img.classList.remove('lazy');
      observer.unobserve(img);
    }
  });
});

// Observe all lazy images
document.querySelectorAll('img[data-src]').forEach(img => {
  imageObserver.observe(img);
});
</script>
            """
            
        optimize_critical_css() -> String
            """
            Inline critical CSS for faster rendering
            """
            RETURN """
<style>
/* Critical CSS - Above the fold styles */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  line-height: 1.6;
  color: #333;
  margin: 0;
  padding: 0;
}

.site-header {
  background: #4a6fa5;
  color: white;
  padding: 1rem 0;
  position: sticky;
  top: 0;
  z-index: 100;
}

.main-nav {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 1rem;
}

.vocab-card, .grammar-item {
  background: #f9f9f9;
  border-radius: 8px;
  padding: 1rem;
  margin-bottom: 1rem;
  border: 1px solid #e0e0e0;
}

.flashcard {
  width: 100%;
  max-width: 400px;
  height: 250px;
  margin: 2rem auto;
  perspective: 1000px;
}

/* Loading states */
.loading {
  opacity: 0.6;
  pointer-events: none;
}

.lazy {
  opacity: 0;
  transition: opacity 0.3s;
}
</style>
            """

## Monitoring and Analytics

CLASS DeploymentMonitoring
    """
    Monitoring and analytics for the deployed application
    """
    
    METHODS:
        setup_analytics() -> String
            """
            Configure Google Analytics or similar
            """
            RETURN """
<!-- Google Analytics (optional) -->
{{ if .Site.Params.googleAnalytics }}
<script async src="https://www.googletagmanager.com/gtag/js?id={{ .Site.Params.googleAnalytics }}"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', '{{ .Site.Params.googleAnalytics }}');
</script>
{{ end }}

<!-- Custom analytics for learning progress -->
<script>
class LearningAnalytics {
  constructor() {
    this.sessionData = {
      startTime: Date.now(),
      interactions: [],
      practiceResults: []
    };
  }
  
  trackPracticeSession(results) {
    this.sessionData.practiceResults.push({
      timestamp: Date.now(),
      correct: results.correct,
      total: results.total,
      accuracy: results.accuracy,
      duration: results.duration
    });
    
    // Store locally for offline analysis
    this.saveToLocalStorage();
  }
  
  trackInteraction(type, data) {
    this.sessionData.interactions.push({
      timestamp: Date.now(),
      type: type,
      data: data
    });
  }
  
  saveToLocalStorage() {
    const existing = JSON.parse(localStorage.getItem('learning_analytics') || '[]');
    existing.push(this.sessionData);
    
    // Keep only last 100 sessions
    if (existing.length > 100) {
      existing.splice(0, existing.length - 100);
    }
    
    localStorage.setItem('learning_analytics', JSON.stringify(existing));
  }
  
  getProgressReport() {
    const data = JSON.parse(localStorage.getItem('learning_analytics') || '[]');
    return {
      totalSessions: data.length,
      averageAccuracy: this.calculateAverageAccuracy(data),
      learningStreak: this.calculateStreak(data),
      weakAreas: this.identifyWeakAreas(data)
    };
  }
}

// Initialize analytics
const analytics = new LearningAnalytics();
</script>
            """
            
        setup_error_monitoring() -> String
            """
            Set up error monitoring and reporting
            """
            RETURN """
<script>
// Error monitoring
window.addEventListener('error', function(event) {
  const errorData = {
    message: event.message,
    filename: event.filename,
    lineno: event.lineno,
    colno: event.colno,
    stack: event.error ? event.error.stack : null,
    timestamp: Date.now(),
    userAgent: navigator.userAgent,
    url: window.location.href
  };
  
  // Store error locally
  const errors = JSON.parse(localStorage.getItem('app_errors') || '[]');
  errors.push(errorData);
  
  // Keep only last 50 errors
  if (errors.length > 50) {
    errors.splice(0, errors.length - 50);
  }
  
  localStorage.setItem('app_errors', JSON.stringify(errors));
  
  console.error('Application error:', errorData);
});

// Unhandled promise rejection monitoring
window.addEventListener('unhandledrejection', function(event) {
  const errorData = {
    type: 'unhandledrejection',
    reason: event.reason,
    timestamp: Date.now(),
    url: window.location.href
  };
  
  const errors = JSON.parse(localStorage.getItem('app_errors') || '[]');
  errors.push(errorData);
  localStorage.setItem('app_errors', JSON.stringify(errors));
  
  console.error('Unhandled promise rejection:', errorData);
});
</script>
            """
